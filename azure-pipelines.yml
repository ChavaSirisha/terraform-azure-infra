# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- prod

pool:
  vmImage: ubuntu-latest

variables:
  backendAzureRmResourceGroupName: 'terraform-backend-rg'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmStorageAccountName: 'demoterraformbackendstg'

stages:
- stage: Deploy
  displayName: "Deploy Infrastructure"
  jobs:
  - job: TerraformApply
    displayName: "Terraform Apply"
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'

    - task: TerraformInstaller@1
      displayName: 'Terraform - Install'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform - Check Version'
      inputs:
        provider: 'azurerm'
        command: 'custom'
        commandOptions: 'version'
        outputTo: 'console'
        customCommand: 'version'
        environmentServiceNameAzureRM: 'NewTerraform'

    - task: TerraformTaskV4@4
      displayName: 'Terraform - Initialize'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'NewTerraform'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: 'terraform.tfstate'
    
    

    - task: DownloadSecureFile@1
      name: sshPrivateKey
      displayName: 'Download SSH Private Key'
      inputs:
        secureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: sshPublicKey
      displayName: 'Download SSH Public Key'
      inputs:
        secureFile: 'id_rsa.pub'

    - script: |
        mkdir -p ~/.ssh
        cp $(Agent.TempDirectory)/id_rsa ~/.ssh/id_rsa
        cp $(Agent.TempDirectory)/id_rsa.pub ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub
      displayName: 'Setup SSH Keys'
    - task: TerraformTaskV4@4
      displayName: 'Terraform - Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
    - script: |
        echo "Ensuring apache-install.sh is available..."
        ls -l
      displayName: "Check Apache Install Script"

    - task: TerraformTaskV4@4
      displayName: 'Terraform - Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out=tfplan'
        environmentServiceNameAzureRM: 'NewTerraform'
    - task: TerraformTaskV4@4
      displayName: 'Terraform - Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-auto-approve tfplan'
        environmentServiceNameAzureRM: 'NewTerraform'

- stage: ApprovalBeforeDestroy
  displayName: "Approval Before Destroy"
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: WaitForApproval
    displayName: "Wait for Manual Approval"
    pool: server  
    timeoutInMinutes: 30
    steps:
    - task: ManualValidation@0
      displayName: "Manual Approval to Destroy"
      inputs:
        notifyUsers: 'bkrishna28117@gmail.com' 
        instructions: 'Please approve Terraform destroy execution.'
        onTimeout: 'reject'

- stage: Destroy
  displayName: "Destroy Infrastructure"
  dependsOn: ApprovalBeforeDestroy
  condition: succeeded()
  jobs:
  - job: TerraformDestroy
    displayName: "Terraform Destroy"
    pool:
      vmImage: ubuntu-latest  
    steps:
    - task: TerraformTaskV4@4
      displayName: 'Terraform - Initialize'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'NewTerraform'
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmKey: 'terraform.tfstate'
    - task: DownloadSecureFile@1
      name: sshPrivateKey
      displayName: 'Download SSH Private Key'
      inputs:
        secureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: sshPublicKey
      displayName: 'Download SSH Public Key'
      inputs:
        secureFile: 'id_rsa.pub'

    - script: |
        mkdir -p ~/.ssh
        cp $(Agent.TempDirectory)/id_rsa ~/.ssh/id_rsa
        cp $(Agent.TempDirectory)/id_rsa.pub ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub
      displayName: 'Setup SSH Keys'
    - task: TerraformTaskV4@4
      displayName: 'Terraform - Destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        commandOptions: '-auto-approve'
        environmentServiceNameAzureRM: 'NewTerraform'